// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

        //Available Accounts
    //==================
    //(0) 0xfa0395fcAD077B11967ADC6e1257f382791F2709 (1000 ETH)
    //(1) 0x3fDAcAD1347ed320d235C42C8c9E1D5c99f2e761 (1000 ETH)
    //(2) 0xc13042bB30F5636d1f694282983366366431859F (1000 ETH)
    //(3) 0x700c62ED6D2Db647C80AaaEcc7b50c38a2d017F8 (1000 ETH)
    //(4) 0x06bE75f134dD2325D21EccDaA28cce62e9742794 (1000 ETH)
    //(5) 0x362EaA1D88fb6517a84B8887414D4e1b48D7FEDA (1000 ETH)
    //(6) 0x7E42236dBCC69237E0B40361deE84A01FB7B0F9F (1000 ETH)
    //(7) 0x02a2d3E8f04c716FB30D0Dc5D2dDC2bB99022d83 (1000 ETH)
    //(8) 0xE3cDa979782a367dc980dDa9843B3d801D3A71aE (1000 ETH)
    //(9) 0xA3FE58FDf59092f50d3196aCf69a02063158AC41 (1000 ETH)

    console.log("ganache accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // Initialize access control
    it("     the contract can assign roles to the accounts", async () => {
        const supplyChain = await SupplyChain.deployed();

        let result = await supplyChain.addDistributor(distributorID);
        assert.equal(result.logs[0].event, "DistributorAdded");
        
        result = await supplyChain.addRetailer(retailerID);
        assert.equal(result.logs[0].event, "RetailerAdded");

        result = await supplyChain.addConsumer(consumerID);
        assert.equal(result.logs[0].event, "ConsumerAdded");

        result = await supplyChain.addFarmer(originFarmerID);
        assert.equal(result.logs[0].event, "FarmerAdded");
    });


    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Harvested by calling function harvestItem()
        let harvestResult = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(bufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(bufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(bufferOne[2], originFarmerID, 'Error: Invalid ownerID')
        assert.equal(bufferOne[3], originFarmerID, 'Error: Invalid originFarmerID')
        assert.equal(bufferOne[4], originFarmName, 'Error: Invalid originFarmName')
        assert.equal(bufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation')
        assert.equal(bufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude')
        assert.equal(bufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude')
        assert.equal(bufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(harvestResult.logs[0].event, "Harvested")
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Processed()
        // Mark an item as Processed by calling function processtItem()
        let result = await supplyChain.processItem(upc, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferTwo[5], 1, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Processed")
    });

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Packed()
        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.packItem(upc, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferTwo[5], 2, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Packed")
    });

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event ForSale()
        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferTwo[4], productPrice, 'Error: Invalid productPrice');
        assert.equal(bufferTwo[5], 3, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "ForSale")
    });

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        let balance = web3.utils.toWei("2", "ether");

        const buyerBalanceBefore = await web3.eth.getBalance(distributorID);
        const sellerBalanceBefore = await web3.eth.getBalance(originFarmerID);

        // Declare and Initialize a variable for event
        // Mark an item as Sold by calling function buyItem()
        let result = await supplyChain.buyItem(upc, {from: distributorID, value: balance, gasPrice:0});

        const buyerBalanceAfter = await web3.eth.getBalance(distributorID);
        const sellerBalanceAfter = await web3.eth.getBalance(originFarmerID);

        // Check new balance of both seller and buyer
        //let value = Number(buyerBalanceBefore) - Number(buyerBalanceAfter);
        //assert.equal(value, Number(productPrice));

        //value = Number(sellerBalanceAfter) - Number(sellerBalanceBefore);
        //assert.equal(value, Number(productPrice));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(bufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(bufferOne[2], distributorID, 'Error: Invalid ownerID');
        assert.equal(bufferOne[3], originFarmerID, 'Error: Invalid originFarmerID');
        assert.equal(bufferOne[4], originFarmName, 'Error: Invalid originFarmName');
        assert.equal(bufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation');
        assert.equal(bufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude');
        assert.equal(bufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude');
        assert.equal(bufferTwo[4], Number(productPrice), 'Error: Invalid productPrice');
        assert.equal(bufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(bufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(result.logs[0].event, "Sold")
    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Shipped()
        let result = await supplyChain.shipItem(upc, {from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set. 
        // Since we have just bought the item nothing has changed (except ofcource the state) if we run this test immidiately after the previous test.
        assert.equal(bufferTwo[5], 5, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Shipped")
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Received()
        let result = await supplyChain.receiveItem(upc, {from: retailerID});

        // Mark an item as Sold by calling function buyItem()
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(bufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(bufferOne[2], retailerID, 'Error: Invalid ownerID');
        assert.equal(bufferOne[3], originFarmerID, 'Error: Invalid originFarmerID');
        assert.equal(bufferOne[4], originFarmName, 'Error: Invalid originFarmName');
        assert.equal(bufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation');
        assert.equal(bufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude');
        assert.equal(bufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude');
        assert.equal(bufferTwo[4], Number(productPrice), 'Error: Invalid productPrice');
        assert.equal(bufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(bufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(bufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(result.logs[0].event, "Received")
    });

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let balance = web3.utils.toWei("1", "ether");

        const buyerBalanceBefore = await web3.eth.getBalance(consumerID);
        const sellerBalanceBefore = await web3.eth.getBalance(retailerID);

        // Watch the emitted event Purchased()
        let result = await supplyChain.purchaseItem(upc, {from: consumerID, value: balance, gasPrice:0});

        const buyerBalanceAfter = await web3.eth.getBalance(consumerID);
        const sellerBalanceAfter = await web3.eth.getBalance(retailerID);

        // Check new balance of both seller and buyer
        let value = Number(buyerBalanceBefore) - Number(productPrice);
        assert.equal(value, Number(buyerBalanceAfter));

        value = Number(sellerBalanceAfter) - Number(sellerBalanceBefore);
        assert.equal(value, Number(productPrice));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(bufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(bufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(bufferOne[2], consumerID, 'Error: Invalid ownerID');
        assert.equal(bufferOne[3], originFarmerID, 'Error: Invalid originFarmerID');
        assert.equal(bufferOne[4], originFarmName, 'Error: Invalid originFarmName');
        assert.equal(bufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation');
        assert.equal(bufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude');
        assert.equal(bufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude');
        assert.equal(bufferTwo[4], Number(productPrice), 'Error: Invalid productPrice');
        assert.equal(bufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(bufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(bufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(bufferTwo[8], consumerID, 'Error: Invalid consumerID');
        assert.equal(result.logs[0].event, "Purchased")
    });

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        assert.equal(bufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(bufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(bufferOne[2], consumerID, 'Error: Invalid ownerID');
        assert.equal(bufferOne[3], originFarmerID, 'Error: Invalid originFarmerID');
        assert.equal(bufferOne[4], originFarmName, 'Error: Invalid originFarmName');
        assert.equal(bufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation');
        assert.equal(bufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude');
        assert.equal(bufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude');
    });
    
    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        assert.equal(bufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(bufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(bufferTwo[2], productID, 'Error: Invalid item productID');
        assert.equal(bufferTwo[3], productNotes, 'Error: Invalid item productNotes');
        assert.equal(bufferTwo[4], Number(productPrice), 'Error: Invalid productPrice');
        assert.equal(bufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(bufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(bufferTwo[7], retailerID, 'Error: Invalid retailerID');
        assert.equal(bufferTwo[8], consumerID, 'Error: Invalid consumerID');
    })
});